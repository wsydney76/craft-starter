/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/assets/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/alpinejs/dist/alpine.js":
/*!**********************************************!*\
  !*** ./node_modules/alpinejs/dist/alpine.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function (global, factory) {\n   true ? module.exports = factory() : undefined;\n})(this, function () {\n  'use strict';\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      if (enumerableOnly) symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n      keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n  }\n\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n\n      if (i % 2) {\n        ownKeys(Object(source), true).forEach(function (key) {\n          _defineProperty(target, key, source[key]);\n        });\n      } else if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys(Object(source)).forEach(function (key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n\n    return target;\n  } // Thanks @stimulus:\n  // https://github.com/stimulusjs/stimulus/blob/master/packages/%40stimulus/core/src/application.ts\n\n\n  function domReady() {\n    return new Promise(resolve => {\n      if (document.readyState == \"loading\") {\n        document.addEventListener(\"DOMContentLoaded\", resolve);\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  function arrayUnique(array) {\n    return Array.from(new Set(array));\n  }\n\n  function isTesting() {\n    return navigator.userAgent.includes(\"Node.js\") || navigator.userAgent.includes(\"jsdom\");\n  }\n\n  function checkedAttrLooseCompare(valueA, valueB) {\n    return valueA == valueB;\n  }\n\n  function warnIfMalformedTemplate(el, directive) {\n    if (el.tagName.toLowerCase() !== 'template') {\n      console.warn(`Alpine: [${directive}] directive should only be added to <template> tags. See https://github.com/alpinejs/alpine#${directive}`);\n    } else if (el.content.childElementCount !== 1) {\n      console.warn(`Alpine: <template> tag with [${directive}] encountered with multiple element roots. Make sure <template> only has a single child element.`);\n    }\n  }\n\n  function kebabCase(subject) {\n    return subject.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/[_\\s]/, '-').toLowerCase();\n  }\n\n  function camelCase(subject) {\n    return subject.toLowerCase().replace(/-(\\w)/g, (match, char) => char.toUpperCase());\n  }\n\n  function walk(el, callback) {\n    if (callback(el) === false) return;\n    let node = el.firstElementChild;\n\n    while (node) {\n      walk(node, callback);\n      node = node.nextElementSibling;\n    }\n  }\n\n  function debounce(func, wait) {\n    var timeout;\n    return function () {\n      var context = this,\n          args = arguments;\n\n      var later = function later() {\n        timeout = null;\n        func.apply(context, args);\n      };\n\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n\n  const handleError = (el, expression, error) => {\n    console.warn(`Alpine Error: \"${error}\"\\n\\nExpression: \"${expression}\"\\nElement:`, el);\n\n    if (!isTesting()) {\n      throw error;\n    }\n  };\n\n  function tryCatch(cb, {\n    el,\n    expression\n  }) {\n    try {\n      const value = cb();\n      return value instanceof Promise ? value.catch(e => handleError(el, expression, e)) : value;\n    } catch (e) {\n      handleError(el, expression, e);\n    }\n  }\n\n  function saferEval(el, expression, dataContext, additionalHelperVariables = {}) {\n    return tryCatch(() => {\n      if (typeof expression === 'function') {\n        return expression.call(dataContext);\n      }\n\n      return new Function(['$data', ...Object.keys(additionalHelperVariables)], `var __alpine_result; with($data) { __alpine_result = ${expression} }; return __alpine_result`)(dataContext, ...Object.values(additionalHelperVariables));\n    }, {\n      el,\n      expression\n    });\n  }\n\n  function saferEvalNoReturn(el, expression, dataContext, additionalHelperVariables = {}) {\n    return tryCatch(() => {\n      if (typeof expression === 'function') {\n        return Promise.resolve(expression.call(dataContext, additionalHelperVariables['$event']));\n      }\n\n      let AsyncFunction = Function;\n      /* MODERN-ONLY:START */\n\n      AsyncFunction = Object.getPrototypeOf(async function () {}).constructor;\n      /* MODERN-ONLY:END */\n      // For the cases when users pass only a function reference to the caller: `x-on:click=\"foo\"`\n      // Where \"foo\" is a function. Also, we'll pass the function the event instance when we call it.\n\n      if (Object.keys(dataContext).includes(expression)) {\n        let methodReference = new Function(['dataContext', ...Object.keys(additionalHelperVariables)], `with(dataContext) { return ${expression} }`)(dataContext, ...Object.values(additionalHelperVariables));\n\n        if (typeof methodReference === 'function') {\n          return Promise.resolve(methodReference.call(dataContext, additionalHelperVariables['$event']));\n        } else {\n          return Promise.resolve();\n        }\n      }\n\n      return Promise.resolve(new AsyncFunction(['dataContext', ...Object.keys(additionalHelperVariables)], `with(dataContext) { ${expression} }`)(dataContext, ...Object.values(additionalHelperVariables)));\n    }, {\n      el,\n      expression\n    });\n  }\n\n  const xAttrRE = /^x-(on|bind|data|text|html|model|if|for|show|cloak|transition|ref|spread)\\b/;\n\n  function isXAttr(attr) {\n    const name = replaceAtAndColonWithStandardSyntax(attr.name);\n    return xAttrRE.test(name);\n  }\n\n  function getXAttrs(el, component, type) {\n    let directives = Array.from(el.attributes).filter(isXAttr).map(parseHtmlAttribute); // Get an object of directives from x-spread.\n\n    let spreadDirective = directives.filter(directive => directive.type === 'spread')[0];\n\n    if (spreadDirective) {\n      let spreadObject = saferEval(el, spreadDirective.expression, component.$data); // Add x-spread directives to the pile of existing directives.\n\n      directives = directives.concat(Object.entries(spreadObject).map(([name, value]) => parseHtmlAttribute({\n        name,\n        value\n      })));\n    }\n\n    if (type) return directives.filter(i => i.type === type);\n    return sortDirectives(directives);\n  }\n\n  function sortDirectives(directives) {\n    let directiveOrder = ['bind', 'model', 'show', 'catch-all'];\n    return directives.sort((a, b) => {\n      let typeA = directiveOrder.indexOf(a.type) === -1 ? 'catch-all' : a.type;\n      let typeB = directiveOrder.indexOf(b.type) === -1 ? 'catch-all' : b.type;\n      return directiveOrder.indexOf(typeA) - directiveOrder.indexOf(typeB);\n    });\n  }\n\n  function parseHtmlAttribute({\n    name,\n    value\n  }) {\n    const normalizedName = replaceAtAndColonWithStandardSyntax(name);\n    const typeMatch = normalizedName.match(xAttrRE);\n    const valueMatch = normalizedName.match(/:([a-zA-Z0-9\\-:]+)/);\n    const modifiers = normalizedName.match(/\\.[^.\\]]+(?=[^\\]]*$)/g) || [];\n    return {\n      type: typeMatch ? typeMatch[1] : null,\n      value: valueMatch ? valueMatch[1] : null,\n      modifiers: modifiers.map(i => i.replace('.', '')),\n      expression: value\n    };\n  }\n\n  function isBooleanAttr(attrName) {\n    // As per HTML spec table https://html.spec.whatwg.org/multipage/indices.html#attributes-3:boolean-attribute\n    // Array roughly ordered by estimated usage\n    const booleanAttributes = ['disabled', 'checked', 'required', 'readonly', 'hidden', 'open', 'selected', 'autofocus', 'itemscope', 'multiple', 'novalidate', 'allowfullscreen', 'allowpaymentrequest', 'formnovalidate', 'autoplay', 'controls', 'loop', 'muted', 'playsinline', 'default', 'ismap', 'reversed', 'async', 'defer', 'nomodule'];\n    return booleanAttributes.includes(attrName);\n  }\n\n  function replaceAtAndColonWithStandardSyntax(name) {\n    if (name.startsWith('@')) {\n      return name.replace('@', 'x-on:');\n    } else if (name.startsWith(':')) {\n      return name.replace(':', 'x-bind:');\n    }\n\n    return name;\n  }\n\n  function convertClassStringToArray(classList, filterFn = Boolean) {\n    return classList.split(' ').filter(filterFn);\n  }\n\n  const TRANSITION_TYPE_IN = 'in';\n  const TRANSITION_TYPE_OUT = 'out';\n  const TRANSITION_CANCELLED = 'cancelled';\n\n  function transitionIn(el, show, reject, component, forceSkip = false) {\n    // We don't want to transition on the initial page load.\n    if (forceSkip) return show();\n\n    if (el.__x_transition && el.__x_transition.type === TRANSITION_TYPE_IN) {\n      // there is already a similar transition going on, this was probably triggered by\n      // a change in a different property, let's just leave the previous one doing its job\n      return;\n    }\n\n    const attrs = getXAttrs(el, component, 'transition');\n    const showAttr = getXAttrs(el, component, 'show')[0]; // If this is triggered by a x-show.transition.\n\n    if (showAttr && showAttr.modifiers.includes('transition')) {\n      let modifiers = showAttr.modifiers; // If x-show.transition.out, we'll skip the \"in\" transition.\n\n      if (modifiers.includes('out') && !modifiers.includes('in')) return show();\n      const settingBothSidesOfTransition = modifiers.includes('in') && modifiers.includes('out'); // If x-show.transition.in...out... only use \"in\" related modifiers for this transition.\n\n      modifiers = settingBothSidesOfTransition ? modifiers.filter((i, index) => index < modifiers.indexOf('out')) : modifiers;\n      transitionHelperIn(el, modifiers, show, reject); // Otherwise, we can assume x-transition:enter.\n    } else if (attrs.some(attr => ['enter', 'enter-start', 'enter-end'].includes(attr.value))) {\n      transitionClassesIn(el, component, attrs, show, reject);\n    } else {\n      // If neither, just show that damn thing.\n      show();\n    }\n  }\n\n  function transitionOut(el, hide, reject, component, forceSkip = false) {\n    // We don't want to transition on the initial page load.\n    if (forceSkip) return hide();\n\n    if (el.__x_transition && el.__x_transition.type === TRANSITION_TYPE_OUT) {\n      // there is already a similar transition going on, this was probably triggered by\n      // a change in a different property, let's just leave the previous one doing its job\n      return;\n    }\n\n    const attrs = getXAttrs(el, component, 'transition');\n    const showAttr = getXAttrs(el, component, 'show')[0];\n\n    if (showAttr && showAttr.modifiers.includes('transition')) {\n      let modifiers = showAttr.modifiers;\n      if (modifiers.includes('in') && !modifiers.includes('out')) return hide();\n      const settingBothSidesOfTransition = modifiers.includes('in') && modifiers.includes('out');\n      modifiers = settingBothSidesOfTransition ? modifiers.filter((i, index) => index > modifiers.indexOf('out')) : modifiers;\n      transitionHelperOut(el, modifiers, settingBothSidesOfTransition, hide, reject);\n    } else if (attrs.some(attr => ['leave', 'leave-start', 'leave-end'].includes(attr.value))) {\n      transitionClassesOut(el, component, attrs, hide, reject);\n    } else {\n      hide();\n    }\n  }\n\n  function transitionHelperIn(el, modifiers, showCallback, reject) {\n    // Default values inspired by: https://material.io/design/motion/speed.html#duration\n    const styleValues = {\n      duration: modifierValue(modifiers, 'duration', 150),\n      origin: modifierValue(modifiers, 'origin', 'center'),\n      first: {\n        opacity: 0,\n        scale: modifierValue(modifiers, 'scale', 95)\n      },\n      second: {\n        opacity: 1,\n        scale: 100\n      }\n    };\n    transitionHelper(el, modifiers, showCallback, () => {}, reject, styleValues, TRANSITION_TYPE_IN);\n  }\n\n  function transitionHelperOut(el, modifiers, settingBothSidesOfTransition, hideCallback, reject) {\n    // Make the \"out\" transition .5x slower than the \"in\". (Visually better)\n    // HOWEVER, if they explicitly set a duration for the \"out\" transition,\n    // use that.\n    const duration = settingBothSidesOfTransition ? modifierValue(modifiers, 'duration', 150) : modifierValue(modifiers, 'duration', 150) / 2;\n    const styleValues = {\n      duration: duration,\n      origin: modifierValue(modifiers, 'origin', 'center'),\n      first: {\n        opacity: 1,\n        scale: 100\n      },\n      second: {\n        opacity: 0,\n        scale: modifierValue(modifiers, 'scale', 95)\n      }\n    };\n    transitionHelper(el, modifiers, () => {}, hideCallback, reject, styleValues, TRANSITION_TYPE_OUT);\n  }\n\n  function modifierValue(modifiers, key, fallback) {\n    // If the modifier isn't present, use the default.\n    if (modifiers.indexOf(key) === -1) return fallback; // If it IS present, grab the value after it: x-show.transition.duration.500ms\n\n    const rawValue = modifiers[modifiers.indexOf(key) + 1];\n    if (!rawValue) return fallback;\n\n    if (key === 'scale') {\n      // Check if the very next value is NOT a number and return the fallback.\n      // If x-show.transition.scale, we'll use the default scale value.\n      // That is how a user opts out of the opacity transition.\n      if (!isNumeric(rawValue)) return fallback;\n    }\n\n    if (key === 'duration') {\n      // Support x-show.transition.duration.500ms && duration.500\n      let match = rawValue.match(/([0-9]+)ms/);\n      if (match) return match[1];\n    }\n\n    if (key === 'origin') {\n      // Support chaining origin directions: x-show.transition.top.right\n      if (['top', 'right', 'left', 'center', 'bottom'].includes(modifiers[modifiers.indexOf(key) + 2])) {\n        return [rawValue, modifiers[modifiers.indexOf(key) + 2]].join(' ');\n      }\n    }\n\n    return rawValue;\n  }\n\n  function transitionHelper(el, modifiers, hook1, hook2, reject, styleValues, type) {\n    // clear the previous transition if exists to avoid caching the wrong styles\n    if (el.__x_transition) {\n      el.__x_transition.cancel && el.__x_transition.cancel();\n    } // If the user set these style values, we'll put them back when we're done with them.\n\n\n    const opacityCache = el.style.opacity;\n    const transformCache = el.style.transform;\n    const transformOriginCache = el.style.transformOrigin; // If no modifiers are present: x-show.transition, we'll default to both opacity and scale.\n\n    const noModifiers = !modifiers.includes('opacity') && !modifiers.includes('scale');\n    const transitionOpacity = noModifiers || modifiers.includes('opacity');\n    const transitionScale = noModifiers || modifiers.includes('scale'); // These are the explicit stages of a transition (same stages for in and for out).\n    // This way you can get a birds eye view of the hooks, and the differences\n    // between them.\n\n    const stages = {\n      start() {\n        if (transitionOpacity) el.style.opacity = styleValues.first.opacity;\n        if (transitionScale) el.style.transform = `scale(${styleValues.first.scale / 100})`;\n      },\n\n      during() {\n        if (transitionScale) el.style.transformOrigin = styleValues.origin;\n        el.style.transitionProperty = [transitionOpacity ? `opacity` : ``, transitionScale ? `transform` : ``].join(' ').trim();\n        el.style.transitionDuration = `${styleValues.duration / 1000}s`;\n        el.style.transitionTimingFunction = `cubic-bezier(0.4, 0.0, 0.2, 1)`;\n      },\n\n      show() {\n        hook1();\n      },\n\n      end() {\n        if (transitionOpacity) el.style.opacity = styleValues.second.opacity;\n        if (transitionScale) el.style.transform = `scale(${styleValues.second.scale / 100})`;\n      },\n\n      hide() {\n        hook2();\n      },\n\n      cleanup() {\n        if (transitionOpacity) el.style.opacity = opacityCache;\n        if (transitionScale) el.style.transform = transformCache;\n        if (transitionScale) el.style.transformOrigin = transformOriginCache;\n        el.style.transitionProperty = null;\n        el.style.transitionDuration = null;\n        el.style.transitionTimingFunction = null;\n      }\n\n    };\n    transition(el, stages, type, reject);\n  }\n\n  const ensureStringExpression = (expression, el, component) => {\n    return typeof expression === 'function' ? component.evaluateReturnExpression(el, expression) : expression;\n  };\n\n  function transitionClassesIn(el, component, directives, showCallback, reject) {\n    const enter = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'enter') || {\n      expression: ''\n    }).expression, el, component));\n    const enterStart = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'enter-start') || {\n      expression: ''\n    }).expression, el, component));\n    const enterEnd = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'enter-end') || {\n      expression: ''\n    }).expression, el, component));\n    transitionClasses(el, enter, enterStart, enterEnd, showCallback, () => {}, TRANSITION_TYPE_IN, reject);\n  }\n\n  function transitionClassesOut(el, component, directives, hideCallback, reject) {\n    const leave = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'leave') || {\n      expression: ''\n    }).expression, el, component));\n    const leaveStart = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'leave-start') || {\n      expression: ''\n    }).expression, el, component));\n    const leaveEnd = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'leave-end') || {\n      expression: ''\n    }).expression, el, component));\n    transitionClasses(el, leave, leaveStart, leaveEnd, () => {}, hideCallback, TRANSITION_TYPE_OUT, reject);\n  }\n\n  function transitionClasses(el, classesDuring, classesStart, classesEnd, hook1, hook2, type, reject) {\n    // clear the previous transition if exists to avoid caching the wrong classes\n    if (el.__x_transition) {\n      el.__x_transition.cancel && el.__x_transition.cancel();\n    }\n\n    const originalClasses = el.__x_original_classes || [];\n    const stages = {\n      start() {\n        el.classList.add(...classesStart);\n      },\n\n      during() {\n        el.classList.add(...classesDuring);\n      },\n\n      show() {\n        hook1();\n      },\n\n      end() {\n        // Don't remove classes that were in the original class attribute.\n        el.classList.remove(...classesStart.filter(i => !originalClasses.includes(i)));\n        el.classList.add(...classesEnd);\n      },\n\n      hide() {\n        hook2();\n      },\n\n      cleanup() {\n        el.classList.remove(...classesDuring.filter(i => !originalClasses.includes(i)));\n        el.classList.remove(...classesEnd.filter(i => !originalClasses.includes(i)));\n      }\n\n    };\n    transition(el, stages, type, reject);\n  }\n\n  function transition(el, stages, type, reject) {\n    const finish = once(() => {\n      stages.hide(); // Adding an \"isConnected\" check, in case the callback\n      // removed the element from the DOM.\n\n      if (el.isConnected) {\n        stages.cleanup();\n      }\n\n      delete el.__x_transition;\n    });\n    el.__x_transition = {\n      // Set transition type so we can avoid clearing transition if the direction is the same\n      type: type,\n      // create a callback for the last stages of the transition so we can call it\n      // from different point and early terminate it. Once will ensure that function\n      // is only called one time.\n      cancel: once(() => {\n        reject(TRANSITION_CANCELLED);\n        finish();\n      }),\n      finish,\n      // This store the next animation frame so we can cancel it\n      nextFrame: null\n    };\n    stages.start();\n    stages.during();\n    el.__x_transition.nextFrame = requestAnimationFrame(() => {\n      // Note: Safari's transitionDuration property will list out comma separated transition durations\n      // for every single transition property. Let's grab the first one and call it a day.\n      let duration = Number(getComputedStyle(el).transitionDuration.replace(/,.*/, '').replace('s', '')) * 1000;\n\n      if (duration === 0) {\n        duration = Number(getComputedStyle(el).animationDuration.replace('s', '')) * 1000;\n      }\n\n      stages.show();\n      el.__x_transition.nextFrame = requestAnimationFrame(() => {\n        stages.end();\n        setTimeout(el.__x_transition.finish, duration);\n      });\n    });\n  }\n\n  function isNumeric(subject) {\n    return !Array.isArray(subject) && !isNaN(subject);\n  } // Thanks @vuejs\n  // https://github.com/vuejs/vue/blob/4de4649d9637262a9b007720b59f80ac72a5620c/src/shared/util.js\n\n\n  function once(callback) {\n    let called = false;\n    return function () {\n      if (!called) {\n        called = true;\n        callback.apply(this, arguments);\n      }\n    };\n  }\n\n  function handleForDirective(component, templateEl, expression, initialUpdate, extraVars) {\n    warnIfMalformedTemplate(templateEl, 'x-for');\n    let iteratorNames = typeof expression === 'function' ? parseForExpression(component.evaluateReturnExpression(templateEl, expression)) : parseForExpression(expression);\n    let items = evaluateItemsAndReturnEmptyIfXIfIsPresentAndFalseOnElement(component, templateEl, iteratorNames, extraVars); // As we walk the array, we'll also walk the DOM (updating/creating as we go).\n\n    let currentEl = templateEl;\n    items.forEach((item, index) => {\n      let iterationScopeVariables = getIterationScopeVariables(iteratorNames, item, index, items, extraVars());\n      let currentKey = generateKeyForIteration(component, templateEl, index, iterationScopeVariables);\n      let nextEl = lookAheadForMatchingKeyedElementAndMoveItIfFound(currentEl.nextElementSibling, currentKey); // If we haven't found a matching key, insert the element at the current position.\n\n      if (!nextEl) {\n        nextEl = addElementInLoopAfterCurrentEl(templateEl, currentEl); // And transition it in if it's not the first page load.\n\n        transitionIn(nextEl, () => {}, () => {}, component, initialUpdate);\n        nextEl.__x_for = iterationScopeVariables;\n        component.initializeElements(nextEl, () => nextEl.__x_for); // Otherwise update the element we found.\n      } else {\n        // Temporarily remove the key indicator to allow the normal \"updateElements\" to work.\n        delete nextEl.__x_for_key;\n        nextEl.__x_for = iterationScopeVariables;\n        component.updateElements(nextEl, () => nextEl.__x_for);\n      }\n\n      currentEl = nextEl;\n      currentEl.__x_for_key = currentKey;\n    });\n    removeAnyLeftOverElementsFromPreviousUpdate(currentEl, component);\n  } // This was taken from VueJS 2.* core. Thanks Vue!\n\n\n  function parseForExpression(expression) {\n    let forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\n    let stripParensRE = /^\\(|\\)$/g;\n    let forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/;\n    let inMatch = expression.match(forAliasRE);\n    if (!inMatch) return;\n    let res = {};\n    res.items = inMatch[2].trim();\n    let item = inMatch[1].trim().replace(stripParensRE, '');\n    let iteratorMatch = item.match(forIteratorRE);\n\n    if (iteratorMatch) {\n      res.item = item.replace(forIteratorRE, '').trim();\n      res.index = iteratorMatch[1].trim();\n\n      if (iteratorMatch[2]) {\n        res.collection = iteratorMatch[2].trim();\n      }\n    } else {\n      res.item = item;\n    }\n\n    return res;\n  }\n\n  function getIterationScopeVariables(iteratorNames, item, index, items, extraVars) {\n    // We must create a new object, so each iteration has a new scope\n    let scopeVariables = extraVars ? _objectSpread2({}, extraVars) : {};\n    scopeVariables[iteratorNames.item] = item;\n    if (iteratorNames.index) scopeVariables[iteratorNames.index] = index;\n    if (iteratorNames.collection) scopeVariables[iteratorNames.collection] = items;\n    return scopeVariables;\n  }\n\n  function generateKeyForIteration(component, el, index, iterationScopeVariables) {\n    let bindKeyAttribute = getXAttrs(el, component, 'bind').filter(attr => attr.value === 'key')[0]; // If the dev hasn't specified a key, just return the index of the iteration.\n\n    if (!bindKeyAttribute) return index;\n    return component.evaluateReturnExpression(el, bindKeyAttribute.expression, () => iterationScopeVariables);\n  }\n\n  function evaluateItemsAndReturnEmptyIfXIfIsPresentAndFalseOnElement(component, el, iteratorNames, extraVars) {\n    let ifAttribute = getXAttrs(el, component, 'if')[0];\n\n    if (ifAttribute && !component.evaluateReturnExpression(el, ifAttribute.expression)) {\n      return [];\n    }\n\n    let items = component.evaluateReturnExpression(el, iteratorNames.items, extraVars); // This adds support for the `i in n` syntax.\n\n    if (isNumeric(items) && items > 0) {\n      items = Array.from(Array(items).keys(), i => i + 1);\n    }\n\n    return items;\n  }\n\n  function addElementInLoopAfterCurrentEl(templateEl, currentEl) {\n    let clone = document.importNode(templateEl.content, true);\n    currentEl.parentElement.insertBefore(clone, currentEl.nextElementSibling);\n    return currentEl.nextElementSibling;\n  }\n\n  function lookAheadForMatchingKeyedElementAndMoveItIfFound(nextEl, currentKey) {\n    if (!nextEl) return; // If we are already past the x-for generated elements, we don't need to look ahead.\n\n    if (nextEl.__x_for_key === undefined) return; // If the the key's DO match, no need to look ahead.\n\n    if (nextEl.__x_for_key === currentKey) return nextEl; // If they don't, we'll look ahead for a match.\n    // If we find it, we'll move it to the current position in the loop.\n\n    let tmpNextEl = nextEl;\n\n    while (tmpNextEl) {\n      if (tmpNextEl.__x_for_key === currentKey) {\n        return tmpNextEl.parentElement.insertBefore(tmpNextEl, nextEl);\n      }\n\n      tmpNextEl = tmpNextEl.nextElementSibling && tmpNextEl.nextElementSibling.__x_for_key !== undefined ? tmpNextEl.nextElementSibling : false;\n    }\n  }\n\n  function removeAnyLeftOverElementsFromPreviousUpdate(currentEl, component) {\n    var nextElementFromOldLoop = currentEl.nextElementSibling && currentEl.nextElementSibling.__x_for_key !== undefined ? currentEl.nextElementSibling : false;\n\n    while (nextElementFromOldLoop) {\n      let nextElementFromOldLoopImmutable = nextElementFromOldLoop;\n      let nextSibling = nextElementFromOldLoop.nextElementSibling;\n      transitionOut(nextElementFromOldLoop, () => {\n        nextElementFromOldLoopImmutable.remove();\n      }, () => {}, component);\n      nextElementFromOldLoop = nextSibling && nextSibling.__x_for_key !== undefined ? nextSibling : false;\n    }\n  }\n\n  function handleAttributeBindingDirective(component, el, attrName, expression, extraVars, attrType, modifiers) {\n    var value = component.evaluateReturnExpression(el, expression, extraVars);\n\n    if (attrName === 'value') {\n      if (Alpine.ignoreFocusedForValueBinding && document.activeElement.isSameNode(el)) return; // If nested model key is undefined, set the default value to empty string.\n\n      if (value === undefined && expression.match(/\\./)) {\n        value = '';\n      }\n\n      if (el.type === 'radio') {\n        // Set radio value from x-bind:value, if no \"value\" attribute exists.\n        // If there are any initial state values, radio will have a correct\n        // \"checked\" value since x-bind:value is processed before x-model.\n        if (el.attributes.value === undefined && attrType === 'bind') {\n          el.value = value;\n        } else if (attrType !== 'bind') {\n          el.checked = checkedAttrLooseCompare(el.value, value);\n        }\n      } else if (el.type === 'checkbox') {\n        // If we are explicitly binding a string to the :value, set the string,\n        // If the value is a boolean, leave it alone, it will be set to \"on\"\n        // automatically.\n        if (typeof value !== 'boolean' && ![null, undefined].includes(value) && attrType === 'bind') {\n          el.value = String(value);\n        } else if (attrType !== 'bind') {\n          if (Array.isArray(value)) {\n            // I'm purposely not using Array.includes here because it's\n            // strict, and because of Numeric/String mis-casting, I\n            // want the \"includes\" to be \"fuzzy\".\n            el.checked = value.some(val => checkedAttrLooseCompare(val, el.value));\n          } else {\n            el.checked = !!value;\n          }\n        }\n      } else if (el.tagName === 'SELECT') {\n        updateSelect(el, value);\n      } else {\n        if (el.value === value) return;\n        el.value = value;\n      }\n    } else if (attrName === 'class') {\n      if (Array.isArray(value)) {\n        const originalClasses = el.__x_original_classes || [];\n        el.setAttribute('class', arrayUnique(originalClasses.concat(value)).join(' '));\n      } else if (typeof value === 'object') {\n        // Sorting the keys / class names by their boolean value will ensure that\n        // anything that evaluates to `false` and needs to remove classes is run first.\n        const keysSortedByBooleanValue = Object.keys(value).sort((a, b) => value[a] - value[b]);\n        keysSortedByBooleanValue.forEach(classNames => {\n          if (value[classNames]) {\n            convertClassStringToArray(classNames).forEach(className => el.classList.add(className));\n          } else {\n            convertClassStringToArray(classNames).forEach(className => el.classList.remove(className));\n          }\n        });\n      } else {\n        const originalClasses = el.__x_original_classes || [];\n        const newClasses = value ? convertClassStringToArray(value) : [];\n        el.setAttribute('class', arrayUnique(originalClasses.concat(newClasses)).join(' '));\n      }\n    } else {\n      attrName = modifiers.includes('camel') ? camelCase(attrName) : attrName; // If an attribute's bound value is null, undefined or false, remove the attribute\n\n      if ([null, undefined, false].includes(value)) {\n        el.removeAttribute(attrName);\n      } else {\n        isBooleanAttr(attrName) ? setIfChanged(el, attrName, attrName) : setIfChanged(el, attrName, value);\n      }\n    }\n  }\n\n  function setIfChanged(el, attrName, value) {\n    if (el.getAttribute(attrName) != value) {\n      el.setAttribute(attrName, value);\n    }\n  }\n\n  function updateSelect(el, value) {\n    const arrayWrappedValue = [].concat(value).map(value => {\n      return value + '';\n    });\n    Array.from(el.options).forEach(option => {\n      option.selected = arrayWrappedValue.includes(option.value || option.text);\n    });\n  }\n\n  function handleTextDirective(el, output, expression) {\n    // If nested model key is undefined, set the default value to empty string.\n    if (output === undefined && expression.match(/\\./)) {\n      output = '';\n    }\n\n    el.textContent = output;\n  }\n\n  function handleHtmlDirective(component, el, expression, extraVars) {\n    el.innerHTML = component.evaluateReturnExpression(el, expression, extraVars);\n  }\n\n  function handleShowDirective(component, el, value, modifiers, initialUpdate = false) {\n    const hide = () => {\n      el.style.display = 'none';\n      el.__x_is_shown = false;\n    };\n\n    const show = () => {\n      if (el.style.length === 1 && el.style.display === 'none') {\n        el.removeAttribute('style');\n      } else {\n        el.style.removeProperty('display');\n      }\n\n      el.__x_is_shown = true;\n    };\n\n    if (initialUpdate === true) {\n      if (value) {\n        show();\n      } else {\n        hide();\n      }\n\n      return;\n    }\n\n    const handle = (resolve, reject) => {\n      if (value) {\n        if (el.style.display === 'none' || el.__x_transition) {\n          transitionIn(el, () => {\n            show();\n          }, reject, component);\n        }\n\n        resolve(() => {});\n      } else {\n        if (el.style.display !== 'none') {\n          transitionOut(el, () => {\n            resolve(() => {\n              hide();\n            });\n          }, reject, component);\n        } else {\n          resolve(() => {});\n        }\n      }\n    }; // The working of x-show is a bit complex because we need to\n    // wait for any child transitions to finish before hiding\n    // some element. Also, this has to be done recursively.\n    // If x-show.immediate, foregoe the waiting.\n\n\n    if (modifiers.includes('immediate')) {\n      handle(finish => finish(), () => {});\n      return;\n    } // x-show is encountered during a DOM tree walk. If an element\n    // we encounter is NOT a child of another x-show element we\n    // can execute the previous x-show stack (if one exists).\n\n\n    if (component.showDirectiveLastElement && !component.showDirectiveLastElement.contains(el)) {\n      component.executeAndClearRemainingShowDirectiveStack();\n    }\n\n    component.showDirectiveStack.push(handle);\n    component.showDirectiveLastElement = el;\n  }\n\n  function handleIfDirective(component, el, expressionResult, initialUpdate, extraVars) {\n    warnIfMalformedTemplate(el, 'x-if');\n    const elementHasAlreadyBeenAdded = el.nextElementSibling && el.nextElementSibling.__x_inserted_me === true;\n\n    if (expressionResult && (!elementHasAlreadyBeenAdded || el.__x_transition)) {\n      const clone = document.importNode(el.content, true);\n      el.parentElement.insertBefore(clone, el.nextElementSibling);\n      transitionIn(el.nextElementSibling, () => {}, () => {}, component, initialUpdate);\n      component.initializeElements(el.nextElementSibling, extraVars);\n      el.nextElementSibling.__x_inserted_me = true;\n    } else if (!expressionResult && elementHasAlreadyBeenAdded) {\n      transitionOut(el.nextElementSibling, () => {\n        el.nextElementSibling.remove();\n      }, () => {}, component, initialUpdate);\n    }\n  }\n\n  function registerListener(component, el, event, modifiers, expression, extraVars = {}) {\n    const options = {\n      passive: modifiers.includes('passive')\n    };\n\n    if (modifiers.includes('camel')) {\n      event = camelCase(event);\n    }\n\n    if (modifiers.includes('away')) {\n      let handler = e => {\n        // Don't do anything if the click came from the element or within it.\n        if (el.contains(e.target)) return; // Don't do anything if this element isn't currently visible.\n\n        if (el.offsetWidth < 1 && el.offsetHeight < 1) return; // Now that we are sure the element is visible, AND the click\n        // is from outside it, let's run the expression.\n\n        runListenerHandler(component, expression, e, extraVars);\n\n        if (modifiers.includes('once')) {\n          document.removeEventListener(event, handler, options);\n        }\n      }; // Listen for this event at the root level.\n\n\n      document.addEventListener(event, handler, options);\n    } else {\n      let listenerTarget = modifiers.includes('window') ? window : modifiers.includes('document') ? document : el;\n\n      let handler = e => {\n        // Remove this global event handler if the element that declared it\n        // has been removed. It's now stale.\n        if (listenerTarget === window || listenerTarget === document) {\n          if (!document.body.contains(el)) {\n            listenerTarget.removeEventListener(event, handler, options);\n            return;\n          }\n        }\n\n        if (isKeyEvent(event)) {\n          if (isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers)) {\n            return;\n          }\n        }\n\n        if (modifiers.includes('prevent')) e.preventDefault();\n        if (modifiers.includes('stop')) e.stopPropagation(); // If the .self modifier isn't present, or if it is present and\n        // the target element matches the element we are registering the\n        // event on, run the handler\n\n        if (!modifiers.includes('self') || e.target === el) {\n          const returnValue = runListenerHandler(component, expression, e, extraVars);\n          returnValue.then(value => {\n            if (value === false) {\n              e.preventDefault();\n            } else {\n              if (modifiers.includes('once')) {\n                listenerTarget.removeEventListener(event, handler, options);\n              }\n            }\n          });\n        }\n      };\n\n      if (modifiers.includes('debounce')) {\n        let nextModifier = modifiers[modifiers.indexOf('debounce') + 1] || 'invalid-wait';\n        let wait = isNumeric(nextModifier.split('ms')[0]) ? Number(nextModifier.split('ms')[0]) : 250;\n        handler = debounce(handler, wait);\n      }\n\n      listenerTarget.addEventListener(event, handler, options);\n    }\n  }\n\n  function runListenerHandler(component, expression, e, extraVars) {\n    return component.evaluateCommandExpression(e.target, expression, () => {\n      return _objectSpread2(_objectSpread2({}, extraVars()), {}, {\n        '$event': e\n      });\n    });\n  }\n\n  function isKeyEvent(event) {\n    return ['keydown', 'keyup'].includes(event);\n  }\n\n  function isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers) {\n    let keyModifiers = modifiers.filter(i => {\n      return !['window', 'document', 'prevent', 'stop'].includes(i);\n    });\n\n    if (keyModifiers.includes('debounce')) {\n      let debounceIndex = keyModifiers.indexOf('debounce');\n      keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || 'invalid-wait').split('ms')[0]) ? 2 : 1);\n    } // If no modifier is specified, we'll call it a press.\n\n\n    if (keyModifiers.length === 0) return false; // If one is passed, AND it matches the key pressed, we'll call it a press.\n\n    if (keyModifiers.length === 1 && keyModifiers[0] === keyToModifier(e.key)) return false; // The user is listening for key combinations.\n\n    const systemKeyModifiers = ['ctrl', 'shift', 'alt', 'meta', 'cmd', 'super'];\n    const selectedSystemKeyModifiers = systemKeyModifiers.filter(modifier => keyModifiers.includes(modifier));\n    keyModifiers = keyModifiers.filter(i => !selectedSystemKeyModifiers.includes(i));\n\n    if (selectedSystemKeyModifiers.length > 0) {\n      const activelyPressedKeyModifiers = selectedSystemKeyModifiers.filter(modifier => {\n        // Alias \"cmd\" and \"super\" to \"meta\"\n        if (modifier === 'cmd' || modifier === 'super') modifier = 'meta';\n        return e[`${modifier}Key`];\n      }); // If all the modifiers selected are pressed, ...\n\n      if (activelyPressedKeyModifiers.length === selectedSystemKeyModifiers.length) {\n        // AND the remaining key is pressed as well. It's a press.\n        if (keyModifiers[0] === keyToModifier(e.key)) return false;\n      }\n    } // We'll call it NOT a valid keypress.\n\n\n    return true;\n  }\n\n  function keyToModifier(key) {\n    switch (key) {\n      case '/':\n        return 'slash';\n\n      case ' ':\n      case 'Spacebar':\n        return 'space';\n\n      default:\n        return key && kebabCase(key);\n    }\n  }\n\n  function registerModelListener(component, el, modifiers, expression, extraVars) {\n    // If the element we are binding to is a select, a radio, or checkbox\n    // we'll listen for the change event instead of the \"input\" event.\n    var event = el.tagName.toLowerCase() === 'select' || ['checkbox', 'radio'].includes(el.type) || modifiers.includes('lazy') ? 'change' : 'input';\n    const listenerExpression = `${expression} = rightSideOfExpression($event, ${expression})`;\n    registerListener(component, el, event, modifiers, listenerExpression, () => {\n      return _objectSpread2(_objectSpread2({}, extraVars()), {}, {\n        rightSideOfExpression: generateModelAssignmentFunction(el, modifiers, expression)\n      });\n    });\n  }\n\n  function generateModelAssignmentFunction(el, modifiers, expression) {\n    if (el.type === 'radio') {\n      // Radio buttons only work properly when they share a name attribute.\n      // People might assume we take care of that for them, because\n      // they already set a shared \"x-model\" attribute.\n      if (!el.hasAttribute('name')) el.setAttribute('name', expression);\n    }\n\n    return (event, currentValue) => {\n      // Check for event.detail due to an issue where IE11 handles other events as a CustomEvent.\n      if (event instanceof CustomEvent && event.detail) {\n        return event.detail;\n      } else if (el.type === 'checkbox') {\n        // If the data we are binding to is an array, toggle its value inside the array.\n        if (Array.isArray(currentValue)) {\n          const newValue = modifiers.includes('number') ? safeParseNumber(event.target.value) : event.target.value;\n          return event.target.checked ? currentValue.concat([newValue]) : currentValue.filter(el => !checkedAttrLooseCompare(el, newValue));\n        } else {\n          return event.target.checked;\n        }\n      } else if (el.tagName.toLowerCase() === 'select' && el.multiple) {\n        return modifiers.includes('number') ? Array.from(event.target.selectedOptions).map(option => {\n          const rawValue = option.value || option.text;\n          return safeParseNumber(rawValue);\n        }) : Array.from(event.target.selectedOptions).map(option => {\n          return option.value || option.text;\n        });\n      } else {\n        const rawValue = event.target.value;\n        return modifiers.includes('number') ? safeParseNumber(rawValue) : modifiers.includes('trim') ? rawValue.trim() : rawValue;\n      }\n    };\n  }\n\n  function safeParseNumber(rawValue) {\n    const number = rawValue ? parseFloat(rawValue) : null;\n    return isNumeric(number) ? number : rawValue;\n  }\n  /**\n   * Copyright (C) 2017 salesforce.com, inc.\n   */\n\n\n  const {\n    isArray\n  } = Array;\n  const {\n    getPrototypeOf,\n    create: ObjectCreate,\n    defineProperty: ObjectDefineProperty,\n    defineProperties: ObjectDefineProperties,\n    isExtensible,\n    getOwnPropertyDescriptor,\n    getOwnPropertyNames,\n    getOwnPropertySymbols,\n    preventExtensions,\n    hasOwnProperty\n  } = Object;\n  const {\n    push: ArrayPush,\n    concat: ArrayConcat,\n    map: ArrayMap\n  } = Array.prototype;\n\n  function isUndefined(obj) {\n    return obj === undefined;\n  }\n\n  function isFunction(obj) {\n    return typeof obj === 'function';\n  }\n\n  function isObject(obj) {\n    return typeof obj === 'object';\n  }\n\n  const proxyToValueMap = new WeakMap();\n\n  function registerProxy(proxy, value) {\n    proxyToValueMap.set(proxy, value);\n  }\n\n  const unwrap = replicaOrAny => proxyToValueMap.get(replicaOrAny) || replicaOrAny;\n\n  function wrapValue(membrane, value) {\n    return membrane.valueIsObservable(value) ? membrane.getProxy(value) : value;\n  }\n  /**\n   * Unwrap property descriptors will set value on original descriptor\n   * We only need to unwrap if value is specified\n   * @param descriptor external descrpitor provided to define new property on original value\n   */\n\n\n  function unwrapDescriptor(descriptor) {\n    if (hasOwnProperty.call(descriptor, 'value')) {\n      descriptor.value = unwrap(descriptor.value);\n    }\n\n    return descriptor;\n  }\n\n  function lockShadowTarget(membrane, shadowTarget, originalTarget) {\n    const targetKeys = ArrayConcat.call(getOwnPropertyNames(originalTarget), getOwnPropertySymbols(originalTarget));\n    targetKeys.forEach(key => {\n      let descriptor = getOwnPropertyDescriptor(originalTarget, key); // We do not need to wrap the descriptor if configurable\n      // Because we can deal with wrapping it when user goes through\n      // Get own property descriptor. There is also a chance that this descriptor\n      // could change sometime in the future, so we can defer wrapping\n      // until we need to\n\n      if (!descriptor.configurable) {\n        descriptor = wrapDescriptor(membrane, descriptor, wrapValue);\n      }\n\n      ObjectDefineProperty(shadowTarget, key, descriptor);\n    });\n    preventExtensions(shadowTarget);\n  }\n\n  class ReactiveProxyHandler {\n    constructor(membrane, value) {\n      this.originalTarget = value;\n      this.membrane = membrane;\n    }\n\n    get(shadowTarget, key) {\n      const {\n        originalTarget,\n        membrane\n      } = this;\n      const value = originalTarget[key];\n      const {\n        valueObserved\n      } = membrane;\n      valueObserved(originalTarget, key);\n      return membrane.getProxy(value);\n    }\n\n    set(shadowTarget, key, value) {\n      const {\n        originalTarget,\n        membrane: {\n          valueMutated\n        }\n      } = this;\n      const oldValue = originalTarget[key];\n\n      if (oldValue !== value) {\n        originalTarget[key] = value;\n        valueMutated(originalTarget, key);\n      } else if (key === 'length' && isArray(originalTarget)) {\n        // fix for issue #236: push will add the new index, and by the time length\n        // is updated, the internal length is already equal to the new length value\n        // therefore, the oldValue is equal to the value. This is the forking logic\n        // to support this use case.\n        valueMutated(originalTarget, key);\n      }\n\n      return true;\n    }\n\n    deleteProperty(shadowTarget, key) {\n      const {\n        originalTarget,\n        membrane: {\n          valueMutated\n        }\n      } = this;\n      delete originalTarget[key];\n      valueMutated(originalTarget, key);\n      return true;\n    }\n\n    apply(shadowTarget, thisArg, argArray) {\n      /* No op */\n    }\n\n    construct(target, argArray, newTarget) {\n      /* No op */\n    }\n\n    has(shadowTarget, key) {\n      const {\n        originalTarget,\n        membrane: {\n          valueObserved\n        }\n      } = this;\n      valueObserved(originalTarget, key);\n      return key in originalTarget;\n    }\n\n    ownKeys(shadowTarget) {\n      const {\n        originalTarget\n      } = this;\n      return ArrayConcat.call(getOwnPropertyNames(originalTarget), getOwnPropertySymbols(originalTarget));\n    }\n\n    isExtensible(shadowTarget) {\n      const shadowIsExtensible = isExtensible(shadowTarget);\n\n      if (!shadowIsExtensible) {\n        return shadowIsExtensible;\n      }\n\n      const {\n        originalTarget,\n        membrane\n      } = this;\n      const targetIsExtensible = isExtensible(originalTarget);\n\n      if (!targetIsExtensible) {\n        lockShadowTarget(membrane, shadowTarget, originalTarget);\n      }\n\n      return targetIsExtensible;\n    }\n\n    setPrototypeOf(shadowTarget, prototype) {}\n\n    getPrototypeOf(shadowTarget) {\n      const {\n        originalTarget\n      } = this;\n      return getPrototypeOf(originalTarget);\n    }\n\n    getOwnPropertyDescriptor(shadowTarget, key) {\n      const {\n        originalTarget,\n        membrane\n      } = this;\n      const {\n        valueObserved\n      } = this.membrane; // keys looked up via hasOwnProperty need to be reactive\n\n      valueObserved(originalTarget, key);\n      let desc = getOwnPropertyDescriptor(originalTarget, key);\n\n      if (isUndefined(desc)) {\n        return desc;\n      }\n\n      const shadowDescriptor = getOwnPropertyDescriptor(shadowTarget, key);\n\n      if (!isUndefined(shadowDescriptor)) {\n        return shadowDescriptor;\n      } // Note: by accessing the descriptor, the key is marked as observed\n      // but access to the value, setter or getter (if available) cannot observe\n      // mutations, just like regular methods, in which case we just do nothing.\n\n\n      desc = wrapDescriptor(membrane, desc, wrapValue);\n\n      if (!desc.configurable) {\n        // If descriptor from original target is not configurable,\n        // We must copy the wrapped descriptor over to the shadow target.\n        // Otherwise, proxy will throw an invariant error.\n        // This is our last chance to lock the value.\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor#Invariants\n        ObjectDefineProperty(shadowTarget, key, desc);\n      }\n\n      return desc;\n    }\n\n    preventExtensions(shadowTarget) {\n      const {\n        originalTarget,\n        membrane\n      } = this;\n      lockShadowTarget(membrane, shadowTarget, originalTarget);\n      preventExtensions(originalTarget);\n      return true;\n    }\n\n    defineProperty(shadowTarget, key, descriptor) {\n      const {\n        originalTarget,\n        membrane\n      } = this;\n      const {\n        valueMutated\n      } = membrane;\n      const {\n        configurable\n      } = descriptor; // We have to check for value in descriptor\n      // because Object.freeze(proxy) calls this method\n      // with only { configurable: false, writeable: false }\n      // Additionally, method will only be called with writeable:false\n      // if the descriptor has a value, as opposed to getter/setter\n      // So we can just check if writable is present and then see if\n      // value is present. This eliminates getter and setter descriptors\n\n      if (hasOwnProperty.call(descriptor, 'writable') && !hasOwnProperty.call(descriptor, 'value')) {\n        const originalDescriptor = getOwnPropertyDescriptor(originalTarget, key);\n        descriptor.value = originalDescriptor.value;\n      }\n\n      ObjectDefineProperty(originalTarget, key, unwrapDescriptor(descriptor));\n\n      if (configurable === false) {\n        ObjectDefineProperty(shadowTarget, key, wrapDescriptor(membrane, descriptor, wrapValue));\n      }\n\n      valueMutated(originalTarget, key);\n      return true;\n    }\n\n  }\n\n  function wrapReadOnlyValue(membrane, value) {\n    return membrane.valueIsObservable(value) ? membrane.getReadOnlyProxy(value) : value;\n  }\n\n  class ReadOnlyHandler {\n    constructor(membrane, value) {\n      this.originalTarget = value;\n      this.membrane = membrane;\n    }\n\n    get(shadowTarget, key) {\n      const {\n        membrane,\n        originalTarget\n      } = this;\n      const value = originalTarget[key];\n      const {\n        valueObserved\n      } = membrane;\n      valueObserved(originalTarget, key);\n      return membrane.getReadOnlyProxy(value);\n    }\n\n    set(shadowTarget, key, value) {\n      return false;\n    }\n\n    deleteProperty(shadowTarget, key) {\n      return false;\n    }\n\n    apply(shadowTarget, thisArg, argArray) {\n      /* No op */\n    }\n\n    construct(target, argArray, newTarget) {\n      /* No op */\n    }\n\n    has(shadowTarget, key) {\n      const {\n        originalTarget,\n        membrane: {\n          valueObserved\n        }\n      } = this;\n      valueObserved(originalTarget, key);\n      return key in originalTarget;\n    }\n\n    ownKeys(shadowTarget) {\n      const {\n        originalTarget\n      } = this;\n      return ArrayConcat.call(getOwnPropertyNames(originalTarget), getOwnPropertySymbols(originalTarget));\n    }\n\n    setPrototypeOf(shadowTarget, prototype) {}\n\n    getOwnPropertyDescriptor(shadowTarget, key) {\n      const {\n        originalTarget,\n        membrane\n      } = this;\n      const {\n        valueObserved\n      } = membrane; // keys looked up via hasOwnProperty need to be reactive\n\n      valueObserved(originalTarget, key);\n      let desc = getOwnPropertyDescriptor(originalTarget, key);\n\n      if (isUndefined(desc)) {\n        return desc;\n      }\n\n      const shadowDescriptor = getOwnPropertyDescriptor(shadowTarget, key);\n\n      if (!isUndefined(shadowDescriptor)) {\n        return shadowDescriptor;\n      } // Note: by accessing the descriptor, the key is marked as observed\n      // but access to the value or getter (if available) cannot be observed,\n      // just like regular methods, in which case we just do nothing.\n\n\n      desc = wrapDescriptor(membrane, desc, wrapReadOnlyValue);\n\n      if (hasOwnProperty.call(desc, 'set')) {\n        desc.set = undefined; // readOnly membrane does not allow setters\n      }\n\n      if (!desc.configurable) {\n        // If descriptor from original target is not configurable,\n        // We must copy the wrapped descriptor over to the shadow target.\n        // Otherwise, proxy will throw an invariant error.\n        // This is our last chance to lock the value.\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor#Invariants\n        ObjectDefineProperty(shadowTarget, key, desc);\n      }\n\n      return desc;\n    }\n\n    preventExtensions(shadowTarget) {\n      return false;\n    }\n\n    defineProperty(shadowTarget, key, descriptor) {\n      return false;\n    }\n\n  }\n\n  function createShadowTarget(value) {\n    let shadowTarget = undefined;\n\n    if (isArray(value)) {\n      shadowTarget = [];\n    } else if (isObject(value)) {\n      shadowTarget = {};\n    }\n\n    return shadowTarget;\n  }\n\n  const ObjectDotPrototype = Object.prototype;\n\n  function defaultValueIsObservable(value) {\n    // intentionally checking for null\n    if (value === null) {\n      return false;\n    } // treat all non-object types, including undefined, as non-observable values\n\n\n    if (typeof value !== 'object') {\n      return false;\n    }\n\n    if (isArray(value)) {\n      return true;\n    }\n\n    const proto = getPrototypeOf(value);\n    return proto === ObjectDotPrototype || proto === null || getPrototypeOf(proto) === null;\n  }\n\n  const defaultValueObserved = (obj, key) => {\n    /* do nothing */\n  };\n\n  const defaultValueMutated = (obj, key) => {\n    /* do nothing */\n  };\n\n  const defaultValueDistortion = value => value;\n\n  function wrapDescriptor(membrane, descriptor, getValue) {\n    const {\n      set,\n      get\n    } = descriptor;\n\n    if (hasOwnProperty.call(descriptor, 'value')) {\n      descriptor.value = getValue(membrane, descriptor.value);\n    } else {\n      if (!isUndefined(get)) {\n        descriptor.get = function () {\n          // invoking the original getter with the original target\n          return getValue(membrane, get.call(unwrap(this)));\n        };\n      }\n\n      if (!isUndefined(set)) {\n        descriptor.set = function (value) {\n          // At this point we don't have a clear indication of whether\n          // or not a valid mutation will occur, we don't have the key,\n          // and we are not sure why and how they are invoking this setter.\n          // Nevertheless we preserve the original semantics by invoking the\n          // original setter with the original target and the unwrapped value\n          set.call(unwrap(this), membrane.unwrapProxy(value));\n        };\n      }\n    }\n\n    return descriptor;\n  }\n\n  class ReactiveMembrane {\n    constructor(options) {\n      this.valueDistortion = defaultValueDistortion;\n      this.valueMutated = defaultValueMutated;\n      this.valueObserved = defaultValueObserved;\n      this.valueIsObservable = defaultValueIsObservable;\n      this.objectGraph = new WeakMap();\n\n      if (!isUndefined(options)) {\n        const {\n          valueDistortion,\n          valueMutated,\n          valueObserved,\n          valueIsObservable\n        } = options;\n        this.valueDistortion = isFunction(valueDistortion) ? valueDistortion : defaultValueDistortion;\n        this.valueMutated = isFunction(valueMutated) ? valueMutated : defaultValueMutated;\n        this.valueObserved = isFunction(valueObserved) ? valueObserved : defaultValueObserved;\n        this.valueIsObservable = isFunction(valueIsObservable) ? valueIsObservable : defaultValueIsObservable;\n      }\n    }\n\n    getProxy(value) {\n      const unwrappedValue = unwrap(value);\n      const distorted = this.valueDistortion(unwrappedValue);\n\n      if (this.valueIsObservable(distorted)) {\n        const o = this.getReactiveState(unwrappedValue, distorted); // when trying to extract the writable version of a readonly\n        // we return the readonly.\n\n        return o.readOnly === value ? value : o.reactive;\n      }\n\n      return distorted;\n    }\n\n    getReadOnlyProxy(value) {\n      value = unwrap(value);\n      const distorted = this.valueDistortion(value);\n\n      if (this.valueIsObservable(distorted)) {\n        return this.getReactiveState(value, distorted).readOnly;\n      }\n\n      return distorted;\n    }\n\n    unwrapProxy(p) {\n      return unwrap(p);\n    }\n\n    getReactiveState(value, distortedValue) {\n      const {\n        objectGraph\n      } = this;\n      let reactiveState = objectGraph.get(distortedValue);\n\n      if (reactiveState) {\n        return reactiveState;\n      }\n\n      const membrane = this;\n      reactiveState = {\n        get reactive() {\n          const reactiveHandler = new ReactiveProxyHandler(membrane, distortedValue); // caching the reactive proxy after the first time it is accessed\n\n          const proxy = new Proxy(createShadowTarget(distortedValue), reactiveHandler);\n          registerProxy(proxy, value);\n          ObjectDefineProperty(this, 'reactive', {\n            value: proxy\n          });\n          return proxy;\n        },\n\n        get readOnly() {\n          const readOnlyHandler = new ReadOnlyHandler(membrane, distortedValue); // caching the readOnly proxy after the first time it is accessed\n\n          const proxy = new Proxy(createShadowTarget(distortedValue), readOnlyHandler);\n          registerProxy(proxy, value);\n          ObjectDefineProperty(this, 'readOnly', {\n            value: proxy\n          });\n          return proxy;\n        }\n\n      };\n      objectGraph.set(distortedValue, reactiveState);\n      return reactiveState;\n    }\n\n  }\n  /** version: 0.26.0 */\n\n\n  function wrap(data, mutationCallback) {\n    let membrane = new ReactiveMembrane({\n      valueMutated(target, key) {\n        mutationCallback(target, key);\n      }\n\n    });\n    return {\n      data: membrane.getProxy(data),\n      membrane: membrane\n    };\n  }\n\n  function unwrap$1(membrane, observable) {\n    let unwrappedData = membrane.unwrapProxy(observable);\n    let copy = {};\n    Object.keys(unwrappedData).forEach(key => {\n      if (['$el', '$refs', '$nextTick', '$watch'].includes(key)) return;\n      copy[key] = unwrappedData[key];\n    });\n    return copy;\n  }\n\n  class Component {\n    constructor(el, componentForClone = null) {\n      this.$el = el;\n      const dataAttr = this.$el.getAttribute('x-data');\n      const dataExpression = dataAttr === '' ? '{}' : dataAttr;\n      const initExpression = this.$el.getAttribute('x-init');\n      let dataExtras = {\n        $el: this.$el\n      };\n      let canonicalComponentElementReference = componentForClone ? componentForClone.$el : this.$el;\n      Object.entries(Alpine.magicProperties).forEach(([name, callback]) => {\n        Object.defineProperty(dataExtras, `$${name}`, {\n          get: function get() {\n            return callback(canonicalComponentElementReference);\n          }\n        });\n      });\n      this.unobservedData = componentForClone ? componentForClone.getUnobservedData() : saferEval(el, dataExpression, dataExtras); // Construct a Proxy-based observable. This will be used to handle reactivity.\n\n      let {\n        membrane,\n        data\n      } = this.wrapDataInObservable(this.unobservedData);\n      this.$data = data;\n      this.membrane = membrane; // After making user-supplied data methods reactive, we can now add\n      // our magic properties to the original data for access.\n\n      this.unobservedData.$el = this.$el;\n      this.unobservedData.$refs = this.getRefsProxy();\n      this.nextTickStack = [];\n\n      this.unobservedData.$nextTick = callback => {\n        this.nextTickStack.push(callback);\n      };\n\n      this.watchers = {};\n\n      this.unobservedData.$watch = (property, callback) => {\n        if (!this.watchers[property]) this.watchers[property] = [];\n        this.watchers[property].push(callback);\n      };\n      /* MODERN-ONLY:START */\n      // We remove this piece of code from the legacy build.\n      // In IE11, we have already defined our helpers at this point.\n      // Register custom magic properties.\n\n\n      Object.entries(Alpine.magicProperties).forEach(([name, callback]) => {\n        Object.defineProperty(this.unobservedData, `$${name}`, {\n          get: function get() {\n            return callback(canonicalComponentElementReference, this.$el);\n          }\n        });\n      });\n      /* MODERN-ONLY:END */\n\n      this.showDirectiveStack = [];\n      this.showDirectiveLastElement;\n      componentForClone || Alpine.onBeforeComponentInitializeds.forEach(callback => callback(this));\n      var initReturnedCallback; // If x-init is present AND we aren't cloning (skip x-init on clone)\n\n      if (initExpression && !componentForClone) {\n        // We want to allow data manipulation, but not trigger DOM updates just yet.\n        // We haven't even initialized the elements with their Alpine bindings. I mean c'mon.\n        this.pauseReactivity = true;\n        initReturnedCallback = this.evaluateReturnExpression(this.$el, initExpression);\n        this.pauseReactivity = false;\n      } // Register all our listeners and set all our attribute bindings.\n\n\n      this.initializeElements(this.$el); // Use mutation observer to detect new elements being added within this component at run-time.\n      // Alpine's just so darn flexible amirite?\n\n      this.listenForNewElementsToInitialize();\n\n      if (typeof initReturnedCallback === 'function') {\n        // Run the callback returned from the \"x-init\" hook to allow the user to do stuff after\n        // Alpine's got it's grubby little paws all over everything.\n        initReturnedCallback.call(this.$data);\n      }\n\n      componentForClone || setTimeout(() => {\n        Alpine.onComponentInitializeds.forEach(callback => callback(this));\n      }, 0);\n    }\n\n    getUnobservedData() {\n      return unwrap$1(this.membrane, this.$data);\n    }\n\n    wrapDataInObservable(data) {\n      var self = this;\n      let updateDom = debounce(function () {\n        self.updateElements(self.$el);\n      }, 0);\n      return wrap(data, (target, key) => {\n        if (self.watchers[key]) {\n          // If there's a watcher for this specific key, run it.\n          self.watchers[key].forEach(callback => callback(target[key]));\n        } else if (Array.isArray(target)) {\n          // Arrays are special cases, if any of the items change, we consider the array as mutated.\n          Object.keys(self.watchers).forEach(fullDotNotationKey => {\n            let dotNotationParts = fullDotNotationKey.split('.'); // Ignore length mutations since they would result in duplicate calls.\n            // For example, when calling push, we would get a mutation for the item's key\n            // and a second mutation for the length property.\n\n            if (key === 'length') return;\n            dotNotationParts.reduce((comparisonData, part) => {\n              if (Object.is(target, comparisonData[part])) {\n                self.watchers[fullDotNotationKey].forEach(callback => callback(target));\n              }\n\n              return comparisonData[part];\n            }, self.unobservedData);\n          });\n        } else {\n          // Let's walk through the watchers with \"dot-notation\" (foo.bar) and see\n          // if this mutation fits any of them.\n          Object.keys(self.watchers).filter(i => i.includes('.')).forEach(fullDotNotationKey => {\n            let dotNotationParts = fullDotNotationKey.split('.'); // If this dot-notation watcher's last \"part\" doesn't match the current\n            // key, then skip it early for performance reasons.\n\n            if (key !== dotNotationParts[dotNotationParts.length - 1]) return; // Now, walk through the dot-notation \"parts\" recursively to find\n            // a match, and call the watcher if one's found.\n\n            dotNotationParts.reduce((comparisonData, part) => {\n              if (Object.is(target, comparisonData)) {\n                // Run the watchers.\n                self.watchers[fullDotNotationKey].forEach(callback => callback(target[key]));\n              }\n\n              return comparisonData[part];\n            }, self.unobservedData);\n          });\n        } // Don't react to data changes for cases like the `x-created` hook.\n\n\n        if (self.pauseReactivity) return;\n        updateDom();\n      });\n    }\n\n    walkAndSkipNestedComponents(el, callback, initializeComponentCallback = () => {}) {\n      walk(el, el => {\n        // We've hit a component.\n        if (el.hasAttribute('x-data')) {\n          // If it's not the current one.\n          if (!el.isSameNode(this.$el)) {\n            // Initialize it if it's not.\n            if (!el.__x) initializeComponentCallback(el); // Now we'll let that sub-component deal with itself.\n\n            return false;\n          }\n        }\n\n        return callback(el);\n      });\n    }\n\n    initializeElements(rootEl, extraVars = () => {}) {\n      this.walkAndSkipNestedComponents(rootEl, el => {\n        // Don't touch spawns from for loop\n        if (el.__x_for_key !== undefined) return false; // Don't touch spawns from if directives\n\n        if (el.__x_inserted_me !== undefined) return false;\n        this.initializeElement(el, extraVars);\n      }, el => {\n        el.__x = new Component(el);\n      });\n      this.executeAndClearRemainingShowDirectiveStack();\n      this.executeAndClearNextTickStack(rootEl);\n    }\n\n    initializeElement(el, extraVars) {\n      // To support class attribute merging, we have to know what the element's\n      // original class attribute looked like for reference.\n      if (el.hasAttribute('class') && getXAttrs(el, this).length > 0) {\n        el.__x_original_classes = convertClassStringToArray(el.getAttribute('class'));\n      }\n\n      this.registerListeners(el, extraVars);\n      this.resolveBoundAttributes(el, true, extraVars);\n    }\n\n    updateElements(rootEl, extraVars = () => {}) {\n      this.walkAndSkipNestedComponents(rootEl, el => {\n        // Don't touch spawns from for loop (and check if the root is actually a for loop in a parent, don't skip it.)\n        if (el.__x_for_key !== undefined && !el.isSameNode(this.$el)) return false;\n        this.updateElement(el, extraVars);\n      }, el => {\n        el.__x = new Component(el);\n      });\n      this.executeAndClearRemainingShowDirectiveStack();\n      this.executeAndClearNextTickStack(rootEl);\n    }\n\n    executeAndClearNextTickStack(el) {\n      // Skip spawns from alpine directives\n      if (el === this.$el && this.nextTickStack.length > 0) {\n        // We run the tick stack after the next frame to allow any\n        // running transitions to pass the initial show stage.\n        requestAnimationFrame(() => {\n          while (this.nextTickStack.length > 0) {\n            this.nextTickStack.shift()();\n          }\n        });\n      }\n    }\n\n    executeAndClearRemainingShowDirectiveStack() {\n      // The goal here is to start all the x-show transitions\n      // and build a nested promise chain so that elements\n      // only hide when the children are finished hiding.\n      this.showDirectiveStack.reverse().map(handler => {\n        return new Promise((resolve, reject) => {\n          handler(resolve, reject);\n        });\n      }).reduce((promiseChain, promise) => {\n        return promiseChain.then(() => {\n          return promise.then(finishElement => {\n            finishElement();\n          });\n        });\n      }, Promise.resolve(() => {})).catch(e => {\n        if (e !== TRANSITION_CANCELLED) throw e;\n      }); // We've processed the handler stack. let's clear it.\n\n      this.showDirectiveStack = [];\n      this.showDirectiveLastElement = undefined;\n    }\n\n    updateElement(el, extraVars) {\n      this.resolveBoundAttributes(el, false, extraVars);\n    }\n\n    registerListeners(el, extraVars) {\n      getXAttrs(el, this).forEach(({\n        type,\n        value,\n        modifiers,\n        expression\n      }) => {\n        switch (type) {\n          case 'on':\n            registerListener(this, el, value, modifiers, expression, extraVars);\n            break;\n\n          case 'model':\n            registerModelListener(this, el, modifiers, expression, extraVars);\n            break;\n        }\n      });\n    }\n\n    resolveBoundAttributes(el, initialUpdate = false, extraVars) {\n      let attrs = getXAttrs(el, this);\n      attrs.forEach(({\n        type,\n        value,\n        modifiers,\n        expression\n      }) => {\n        switch (type) {\n          case 'model':\n            handleAttributeBindingDirective(this, el, 'value', expression, extraVars, type, modifiers);\n            break;\n\n          case 'bind':\n            // The :key binding on an x-for is special, ignore it.\n            if (el.tagName.toLowerCase() === 'template' && value === 'key') return;\n            handleAttributeBindingDirective(this, el, value, expression, extraVars, type, modifiers);\n            break;\n\n          case 'text':\n            var output = this.evaluateReturnExpression(el, expression, extraVars);\n            handleTextDirective(el, output, expression);\n            break;\n\n          case 'html':\n            handleHtmlDirective(this, el, expression, extraVars);\n            break;\n\n          case 'show':\n            var output = this.evaluateReturnExpression(el, expression, extraVars);\n            handleShowDirective(this, el, output, modifiers, initialUpdate);\n            break;\n\n          case 'if':\n            // If this element also has x-for on it, don't process x-if.\n            // We will let the \"x-for\" directive handle the \"if\"ing.\n            if (attrs.some(i => i.type === 'for')) return;\n            var output = this.evaluateReturnExpression(el, expression, extraVars);\n            handleIfDirective(this, el, output, initialUpdate, extraVars);\n            break;\n\n          case 'for':\n            handleForDirective(this, el, expression, initialUpdate, extraVars);\n            break;\n\n          case 'cloak':\n            el.removeAttribute('x-cloak');\n            break;\n        }\n      });\n    }\n\n    evaluateReturnExpression(el, expression, extraVars = () => {}) {\n      return saferEval(el, expression, this.$data, _objectSpread2(_objectSpread2({}, extraVars()), {}, {\n        $dispatch: this.getDispatchFunction(el)\n      }));\n    }\n\n    evaluateCommandExpression(el, expression, extraVars = () => {}) {\n      return saferEvalNoReturn(el, expression, this.$data, _objectSpread2(_objectSpread2({}, extraVars()), {}, {\n        $dispatch: this.getDispatchFunction(el)\n      }));\n    }\n\n    getDispatchFunction(el) {\n      return (event, detail = {}) => {\n        el.dispatchEvent(new CustomEvent(event, {\n          detail,\n          bubbles: true\n        }));\n      };\n    }\n\n    listenForNewElementsToInitialize() {\n      const targetNode = this.$el;\n      const observerOptions = {\n        childList: true,\n        attributes: true,\n        subtree: true\n      };\n      const observer = new MutationObserver(mutations => {\n        for (let i = 0; i < mutations.length; i++) {\n          // Filter out mutations triggered from child components.\n          const closestParentComponent = mutations[i].target.closest('[x-data]');\n          if (!(closestParentComponent && closestParentComponent.isSameNode(this.$el))) continue;\n\n          if (mutations[i].type === 'attributes' && mutations[i].attributeName === 'x-data') {\n            const xAttr = mutations[i].target.getAttribute('x-data') || '{}';\n            const rawData = saferEval(this.$el, xAttr, {\n              $el: this.$el\n            });\n            Object.keys(rawData).forEach(key => {\n              if (this.$data[key] !== rawData[key]) {\n                this.$data[key] = rawData[key];\n              }\n            });\n          }\n\n          if (mutations[i].addedNodes.length > 0) {\n            mutations[i].addedNodes.forEach(node => {\n              if (node.nodeType !== 1 || node.__x_inserted_me) return;\n\n              if (node.matches('[x-data]') && !node.__x) {\n                node.__x = new Component(node);\n                return;\n              }\n\n              this.initializeElements(node);\n            });\n          }\n        }\n      });\n      observer.observe(targetNode, observerOptions);\n    }\n\n    getRefsProxy() {\n      var self = this;\n      var refObj = {}; // One of the goals of this is to not hold elements in memory, but rather re-evaluate\n      // the DOM when the system needs something from it. This way, the framework is flexible and\n      // friendly to outside DOM changes from libraries like Vue/Livewire.\n      // For this reason, I'm using an \"on-demand\" proxy to fake a \"$refs\" object.\n\n      return new Proxy(refObj, {\n        get(object, property) {\n          if (property === '$isAlpineProxy') return true;\n          var ref; // We can't just query the DOM because it's hard to filter out refs in\n          // nested components.\n\n          self.walkAndSkipNestedComponents(self.$el, el => {\n            if (el.hasAttribute('x-ref') && el.getAttribute('x-ref') === property) {\n              ref = el;\n            }\n          });\n          return ref;\n        }\n\n      });\n    }\n\n  }\n\n  const Alpine = {\n    version: \"2.8.0\",\n    pauseMutationObserver: false,\n    magicProperties: {},\n    onComponentInitializeds: [],\n    onBeforeComponentInitializeds: [],\n    ignoreFocusedForValueBinding: false,\n    start: async function start() {\n      if (!isTesting()) {\n        await domReady();\n      }\n\n      this.discoverComponents(el => {\n        this.initializeComponent(el);\n      }); // It's easier and more performant to just support Turbolinks than listen\n      // to MutationObserver mutations at the document level.\n\n      document.addEventListener(\"turbolinks:load\", () => {\n        this.discoverUninitializedComponents(el => {\n          this.initializeComponent(el);\n        });\n      });\n      this.listenForNewUninitializedComponentsAtRunTime();\n    },\n    discoverComponents: function discoverComponents(callback) {\n      const rootEls = document.querySelectorAll('[x-data]');\n      rootEls.forEach(rootEl => {\n        callback(rootEl);\n      });\n    },\n    discoverUninitializedComponents: function discoverUninitializedComponents(callback, el = null) {\n      const rootEls = (el || document).querySelectorAll('[x-data]');\n      Array.from(rootEls).filter(el => el.__x === undefined).forEach(rootEl => {\n        callback(rootEl);\n      });\n    },\n    listenForNewUninitializedComponentsAtRunTime: function listenForNewUninitializedComponentsAtRunTime() {\n      const targetNode = document.querySelector('body');\n      const observerOptions = {\n        childList: true,\n        attributes: true,\n        subtree: true\n      };\n      const observer = new MutationObserver(mutations => {\n        if (this.pauseMutationObserver) return;\n\n        for (let i = 0; i < mutations.length; i++) {\n          if (mutations[i].addedNodes.length > 0) {\n            mutations[i].addedNodes.forEach(node => {\n              // Discard non-element nodes (like line-breaks)\n              if (node.nodeType !== 1) return; // Discard any changes happening within an existing component.\n              // They will take care of themselves.\n\n              if (node.parentElement && node.parentElement.closest('[x-data]')) return;\n              this.discoverUninitializedComponents(el => {\n                this.initializeComponent(el);\n              }, node.parentElement);\n            });\n          }\n        }\n      });\n      observer.observe(targetNode, observerOptions);\n    },\n    initializeComponent: function initializeComponent(el) {\n      if (!el.__x) {\n        // Wrap in a try/catch so that we don't prevent other components\n        // from initializing when one component contains an error.\n        try {\n          el.__x = new Component(el);\n        } catch (error) {\n          setTimeout(() => {\n            throw error;\n          }, 0);\n        }\n      }\n    },\n    clone: function clone(component, newEl) {\n      if (!newEl.__x) {\n        newEl.__x = new Component(newEl, component);\n      }\n    },\n    addMagicProperty: function addMagicProperty(name, callback) {\n      this.magicProperties[name] = callback;\n    },\n    onComponentInitialized: function onComponentInitialized(callback) {\n      this.onComponentInitializeds.push(callback);\n    },\n    onBeforeComponentInitialized: function onBeforeComponentInitialized(callback) {\n      this.onBeforeComponentInitializeds.push(callback);\n    }\n  };\n\n  if (!isTesting()) {\n    window.Alpine = Alpine;\n\n    if (window.deferLoadingAlpine) {\n      window.deferLoadingAlpine(function () {\n        window.Alpine.start();\n      });\n    } else {\n      window.Alpine.start();\n    }\n  }\n\n  return Alpine;\n});\n\n//# sourceURL=webpack:///./node_modules/alpinejs/dist/alpine.js?");

/***/ }),

/***/ "./node_modules/baguettebox.js/dist/baguetteBox.min.js":
/*!*************************************************************!*\
  !*** ./node_modules/baguettebox.js/dist/baguetteBox.min.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * baguetteBox.js\n * @author  feimosi\n * @version 1.11.1\n * @url https://github.com/feimosi/baguetteBox.js\n */\n!function (e, t) {\n  \"use strict\";\n\n   true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;\n}(this, function () {\n  \"use strict\";\n\n  var r,\n      l,\n      u,\n      c,\n      d,\n      f = '<svg width=\"44\" height=\"60\"><polyline points=\"30 10 10 30 30 50\" stroke=\"rgba(255,255,255,0.5)\" stroke-width=\"4\"stroke-linecap=\"butt\" fill=\"none\" stroke-linejoin=\"round\"/></svg>',\n      g = '<svg width=\"44\" height=\"60\"><polyline points=\"14 10 34 30 14 50\" stroke=\"rgba(255,255,255,0.5)\" stroke-width=\"4\"stroke-linecap=\"butt\" fill=\"none\" stroke-linejoin=\"round\"/></svg>',\n      p = '<svg width=\"30\" height=\"30\"><g stroke=\"rgb(160,160,160)\" stroke-width=\"4\"><line x1=\"5\" y1=\"5\" x2=\"25\" y2=\"25\"/><line x1=\"5\" y1=\"25\" x2=\"25\" y2=\"5\"/></g></svg>',\n      b = {},\n      v = {\n    captions: !0,\n    buttons: \"auto\",\n    fullScreen: !1,\n    noScrollbars: !1,\n    bodyClass: \"baguetteBox-open\",\n    titleTag: !1,\n    async: !1,\n    preload: 2,\n    animation: \"slideIn\",\n    afterShow: null,\n    afterHide: null,\n    onChange: null,\n    overlayBackgroundColor: \"rgba(0,0,0,.8)\"\n  },\n      m = {},\n      h = [],\n      o = 0,\n      n = !1,\n      i = {},\n      a = !1,\n      y = /.+\\.(gif|jpe?g|png|webp)/i,\n      w = {},\n      k = [],\n      s = null,\n      x = function (e) {\n    -1 !== e.target.id.indexOf(\"baguette-img\") && j();\n  },\n      E = function (e) {\n    e.stopPropagation ? e.stopPropagation() : e.cancelBubble = !0, D();\n  },\n      C = function (e) {\n    e.stopPropagation ? e.stopPropagation() : e.cancelBubble = !0, X();\n  },\n      B = function (e) {\n    e.stopPropagation ? e.stopPropagation() : e.cancelBubble = !0, j();\n  },\n      T = function (e) {\n    i.count++, 1 < i.count && (i.multitouch = !0), i.startX = e.changedTouches[0].pageX, i.startY = e.changedTouches[0].pageY;\n  },\n      N = function (e) {\n    if (!a && !i.multitouch) {\n      e.preventDefault ? e.preventDefault() : e.returnValue = !1;\n      var t = e.touches[0] || e.changedTouches[0];\n      40 < t.pageX - i.startX ? (a = !0, D()) : t.pageX - i.startX < -40 ? (a = !0, X()) : 100 < i.startY - t.pageY && j();\n    }\n  },\n      L = function () {\n    i.count--, i.count <= 0 && (i.multitouch = !1), a = !1;\n  },\n      A = function () {\n    L();\n  },\n      P = function (e) {\n    \"block\" === r.style.display && r.contains && !r.contains(e.target) && (e.stopPropagation(), Y());\n  };\n\n  function S(e) {\n    if (w.hasOwnProperty(e)) {\n      var t = w[e].galleries;\n      [].forEach.call(t, function (e) {\n        [].forEach.call(e, function (e) {\n          W(e.imageElement, \"click\", e.eventHandler);\n        }), h === e && (h = []);\n      }), delete w[e];\n    }\n  }\n\n  function F(e) {\n    switch (e.keyCode) {\n      case 37:\n        D();\n        break;\n\n      case 39:\n        X();\n        break;\n\n      case 27:\n        j();\n        break;\n\n      case 36:\n        !function t(e) {\n          e && e.preventDefault();\n          return M(0);\n        }(e);\n        break;\n\n      case 35:\n        !function n(e) {\n          e && e.preventDefault();\n          return M(h.length - 1);\n        }(e);\n    }\n  }\n\n  function H(e, t) {\n    if (h !== e) {\n      for (h = e, function s(e) {\n        e = e || {};\n\n        for (var t in v) b[t] = v[t], \"undefined\" != typeof e[t] && (b[t] = e[t]);\n\n        l.style.transition = l.style.webkitTransition = \"fadeIn\" === b.animation ? \"opacity .4s ease\" : \"slideIn\" === b.animation ? \"\" : \"none\", \"auto\" === b.buttons && ((\"ontouchstart\" in window) || 1 === h.length) && (b.buttons = !1);\n        u.style.display = c.style.display = b.buttons ? \"\" : \"none\";\n\n        try {\n          r.style.backgroundColor = b.overlayBackgroundColor;\n        } catch (n) {}\n      }(t); l.firstChild;) l.removeChild(l.firstChild);\n\n      for (var n, o = [], i = [], a = k.length = 0; a < e.length; a++) (n = J(\"div\")).className = \"full-image\", n.id = \"baguette-img-\" + a, k.push(n), o.push(\"baguetteBox-figure-\" + a), i.push(\"baguetteBox-figcaption-\" + a), l.appendChild(k[a]);\n\n      r.setAttribute(\"aria-labelledby\", o.join(\" \")), r.setAttribute(\"aria-describedby\", i.join(\" \"));\n    }\n  }\n\n  function I(e) {\n    b.noScrollbars && (document.documentElement.style.overflowY = \"hidden\", document.body.style.overflowY = \"scroll\"), \"block\" !== r.style.display && (U(document, \"keydown\", F), i = {\n      count: 0,\n      startX: null,\n      startY: null\n    }, q(o = e, function () {\n      z(o), V(o);\n    }), R(), r.style.display = \"block\", b.fullScreen && function t() {\n      r.requestFullscreen ? r.requestFullscreen() : r.webkitRequestFullscreen ? r.webkitRequestFullscreen() : r.mozRequestFullScreen && r.mozRequestFullScreen();\n    }(), setTimeout(function () {\n      r.className = \"visible\", b.bodyClass && document.body.classList && document.body.classList.add(b.bodyClass), b.afterShow && b.afterShow();\n    }, 50), b.onChange && b.onChange(o, k.length), s = document.activeElement, Y(), n = !0);\n  }\n\n  function Y() {\n    b.buttons ? u.focus() : d.focus();\n  }\n\n  function j() {\n    b.noScrollbars && (document.documentElement.style.overflowY = \"auto\", document.body.style.overflowY = \"auto\"), \"none\" !== r.style.display && (W(document, \"keydown\", F), r.className = \"\", setTimeout(function () {\n      r.style.display = \"none\", document.fullscreen && function e() {\n        document.exitFullscreen ? document.exitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitExitFullscreen && document.webkitExitFullscreen();\n      }(), b.bodyClass && document.body.classList && document.body.classList.remove(b.bodyClass), b.afterHide && b.afterHide(), s && s.focus(), n = !1;\n    }, 500));\n  }\n\n  function q(t, n) {\n    var e = k[t],\n        o = h[t];\n    if (void 0 !== e && void 0 !== o) if (e.getElementsByTagName(\"img\")[0]) n && n();else {\n      var i = o.imageElement,\n          a = i.getElementsByTagName(\"img\")[0],\n          s = \"function\" == typeof b.captions ? b.captions.call(h, i) : i.getAttribute(\"data-caption\") || i.title,\n          r = function d(e) {\n        var t = e.href;\n\n        if (e.dataset) {\n          var n = [];\n\n          for (var o in e.dataset) \"at-\" !== o.substring(0, 3) || isNaN(o.substring(3)) || (n[o.replace(\"at-\", \"\")] = e.dataset[o]);\n\n          for (var i = Object.keys(n).sort(function (e, t) {\n            return parseInt(e, 10) < parseInt(t, 10) ? -1 : 1;\n          }), a = window.innerWidth * window.devicePixelRatio, s = 0; s < i.length - 1 && i[s] < a;) s++;\n\n          t = n[i[s]] || t;\n        }\n\n        return t;\n      }(i),\n          l = J(\"figure\");\n\n      if (l.id = \"baguetteBox-figure-\" + t, l.innerHTML = '<div class=\"baguetteBox-spinner\"><div class=\"baguetteBox-double-bounce1\"></div><div class=\"baguetteBox-double-bounce2\"></div></div>', b.captions && s) {\n        var u = J(\"figcaption\");\n        u.id = \"baguetteBox-figcaption-\" + t, u.innerHTML = s, l.appendChild(u);\n      }\n\n      e.appendChild(l);\n      var c = J(\"img\");\n      c.onload = function () {\n        var e = document.querySelector(\"#baguette-img-\" + t + \" .baguetteBox-spinner\");\n        l.removeChild(e), !b.async && n && n();\n      }, c.setAttribute(\"src\", r), c.alt = a && a.alt || \"\", b.titleTag && s && (c.title = s), l.appendChild(c), b.async && n && n();\n    }\n  }\n\n  function X() {\n    return M(o + 1);\n  }\n\n  function D() {\n    return M(o - 1);\n  }\n\n  function M(e, t) {\n    return !n && 0 <= e && e < t.length ? (H(t, b), I(e), !0) : e < 0 ? (b.animation && O(\"left\"), !1) : e >= k.length ? (b.animation && O(\"right\"), !1) : (q(o = e, function () {\n      z(o), V(o);\n    }), R(), b.onChange && b.onChange(o, k.length), !0);\n  }\n\n  function O(e) {\n    l.className = \"bounce-from-\" + e, setTimeout(function () {\n      l.className = \"\";\n    }, 400);\n  }\n\n  function R() {\n    var e = 100 * -o + \"%\";\n    \"fadeIn\" === b.animation ? (l.style.opacity = 0, setTimeout(function () {\n      m.transforms ? l.style.transform = l.style.webkitTransform = \"translate3d(\" + e + \",0,0)\" : l.style.left = e, l.style.opacity = 1;\n    }, 400)) : m.transforms ? l.style.transform = l.style.webkitTransform = \"translate3d(\" + e + \",0,0)\" : l.style.left = e;\n  }\n\n  function z(e) {\n    e - o >= b.preload || q(e + 1, function () {\n      z(e + 1);\n    });\n  }\n\n  function V(e) {\n    o - e >= b.preload || q(e - 1, function () {\n      V(e - 1);\n    });\n  }\n\n  function U(e, t, n, o) {\n    e.addEventListener ? e.addEventListener(t, n, o) : e.attachEvent(\"on\" + t, function (e) {\n      (e = e || window.event).target = e.target || e.srcElement, n(e);\n    });\n  }\n\n  function W(e, t, n, o) {\n    e.removeEventListener ? e.removeEventListener(t, n, o) : e.detachEvent(\"on\" + t, n);\n  }\n\n  function G(e) {\n    return document.getElementById(e);\n  }\n\n  function J(e) {\n    return document.createElement(e);\n  }\n\n  return [].forEach || (Array.prototype.forEach = function (e, t) {\n    for (var n = 0; n < this.length; n++) e.call(t, this[n], n, this);\n  }), [].filter || (Array.prototype.filter = function (e, t, n, o, i) {\n    for (n = this, o = [], i = 0; i < n.length; i++) e.call(t, n[i], i, n) && o.push(n[i]);\n\n    return o;\n  }), {\n    run: function K(e, t) {\n      return m.transforms = function n() {\n        var e = J(\"div\");\n        return \"undefined\" != typeof e.style.perspective || \"undefined\" != typeof e.style.webkitPerspective;\n      }(), m.svg = function o() {\n        var e = J(\"div\");\n        return e.innerHTML = \"<svg/>\", \"http://www.w3.org/2000/svg\" === (e.firstChild && e.firstChild.namespaceURI);\n      }(), m.passiveEvents = function i() {\n        var e = !1;\n\n        try {\n          var t = Object.defineProperty({}, \"passive\", {\n            get: function () {\n              e = !0;\n            }\n          });\n          window.addEventListener(\"test\", null, t);\n        } catch (n) {}\n\n        return e;\n      }(), function a() {\n        if (r = G(\"baguetteBox-overlay\")) return l = G(\"baguetteBox-slider\"), u = G(\"previous-button\"), c = G(\"next-button\"), void (d = G(\"close-button\"));\n        (r = J(\"div\")).setAttribute(\"role\", \"dialog\"), r.id = \"baguetteBox-overlay\", document.getElementsByTagName(\"body\")[0].appendChild(r), (l = J(\"div\")).id = \"baguetteBox-slider\", r.appendChild(l), (u = J(\"button\")).setAttribute(\"type\", \"button\"), u.id = \"previous-button\", u.setAttribute(\"aria-label\", \"Previous\"), u.innerHTML = m.svg ? f : \"&lt;\", r.appendChild(u), (c = J(\"button\")).setAttribute(\"type\", \"button\"), c.id = \"next-button\", c.setAttribute(\"aria-label\", \"Next\"), c.innerHTML = m.svg ? g : \"&gt;\", r.appendChild(c), (d = J(\"button\")).setAttribute(\"type\", \"button\"), d.id = \"close-button\", d.setAttribute(\"aria-label\", \"Close\"), d.innerHTML = m.svg ? p : \"&times;\", r.appendChild(d), u.className = c.className = d.className = \"baguetteBox-button\", function n() {\n          var e = m.passiveEvents ? {\n            passive: !1\n          } : null,\n              t = m.passiveEvents ? {\n            passive: !0\n          } : null;\n          U(r, \"click\", x), U(u, \"click\", E), U(c, \"click\", C), U(d, \"click\", B), U(l, \"contextmenu\", A), U(r, \"touchstart\", T, t), U(r, \"touchmove\", N, e), U(r, \"touchend\", L), U(document, \"focus\", P, !0);\n        }();\n      }(), S(e), function s(e, a) {\n        var t = document.querySelectorAll(e),\n            n = {\n          galleries: [],\n          nodeList: t\n        };\n        return w[e] = n, [].forEach.call(t, function (e) {\n          a && a.filter && (y = a.filter);\n          var t = [];\n\n          if (t = \"A\" === e.tagName ? [e] : e.getElementsByTagName(\"a\"), 0 !== (t = [].filter.call(t, function (e) {\n            if (-1 === e.className.indexOf(a && a.ignoreClass)) return y.test(e.href);\n          })).length) {\n            var i = [];\n            [].forEach.call(t, function (e, t) {\n              var n = function (e) {\n                e.preventDefault ? e.preventDefault() : e.returnValue = !1, H(i, a), I(t);\n              },\n                  o = {\n                eventHandler: n,\n                imageElement: e\n              };\n\n              U(e, \"click\", n), i.push(o);\n            }), n.galleries.push(i);\n          }\n        }), n.galleries;\n      }(e, t);\n    },\n    show: M,\n    showNext: X,\n    showPrevious: D,\n    hide: j,\n    destroy: function e() {\n      !function n() {\n        var e = m.passiveEvents ? {\n          passive: !1\n        } : null,\n            t = m.passiveEvents ? {\n          passive: !0\n        } : null;\n        W(r, \"click\", x), W(u, \"click\", E), W(c, \"click\", C), W(d, \"click\", B), W(l, \"contextmenu\", A), W(r, \"touchstart\", T, t), W(r, \"touchmove\", N, e), W(r, \"touchend\", L), W(document, \"focus\", P, !0);\n      }(), function t() {\n        for (var e in w) w.hasOwnProperty(e) && S(e);\n      }(), W(document, \"keydown\", F), document.getElementsByTagName(\"body\")[0].removeChild(document.getElementById(\"baguetteBox-overlay\")), w = {}, h = [], o = 0;\n    }\n  };\n});\n\n//# sourceURL=webpack:///./node_modules/baguettebox.js/dist/baguetteBox.min.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _styles_styles_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles/styles.scss */ \"./src/styles/styles.scss\");\n/* harmony import */ var _scripts_scripts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/scripts */ \"./src/scripts/scripts.js\");\n/* harmony import */ var _scripts_scripts__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_scripts_scripts__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var alpinejs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! alpinejs */ \"./node_modules/alpinejs/dist/alpine.js\");\n/* harmony import */ var alpinejs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(alpinejs__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/scripts/scripts.js":
/*!********************************!*\
  !*** ./src/scripts/scripts.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("window.baguetteBox = __webpack_require__(/*! baguettebox.js */ \"./node_modules/baguettebox.js/dist/baguetteBox.min.js\");\n\nwindow.initLightBox = function (id) {\n  window.baguetteBox.run(id);\n};\n\n//# sourceURL=webpack:///./src/scripts/scripts.js?");

/***/ }),

/***/ "./src/styles/styles.scss":
/*!********************************!*\
  !*** ./src/styles/styles.scss ***!
  \********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack:///./src/styles/styles.scss?");

/***/ })

/******/ });